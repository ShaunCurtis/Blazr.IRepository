@page "/Edit"
@page "/Edit/{Id:guid}"
@inject NavigationManager NavManager
@inject WeatherForecastEditService EditService
@implements IDisposable

<PageTitle>Edit</PageTitle>

@if (this.EditService.EditStateContext is not null)
{

    <div class="mb-3">
        <label class="form-label)">Date</label>
        <input class="form-control" type="date" @bind-value=this.EditService.EditStateContext.Date />
    </div>

    <div class="mb-3">
        <label class="form-label">Temperature &deg;C</label>
        <input class="form-control" type="number" @bind-value=this.EditService.EditStateContext.TemperatureC />
    </div>

    <div class="mb-3 form-label">
        <label class="form-label">Summary</label>
        <input class="form-control" type="text" @bind-value=this.EditService.EditStateContext.Summary />
    </div>

    <div class="mb-3 text-end">
        <button disabled="@(!this.EditService.EditStateContext.IsDirty)" type="button" class="btn btn-primary" @onclick=Save>Save</button>
        <button class="btn btn-dark" hidden="@(this.EditService.EditStateContext.IsDirty)" type="button" @onclick=Exit>Exit</button>
        <button class="btn btn-danger" hidden="@(!this.EditService.EditStateContext.IsDirty)" type="button" @onclick=ForceExit>Exit Without Save</button>
    </div>

    <NavigationLock ConfirmExternalNavigation=this.EditService.EditStateContext.IsDirty />
}

@code {
    [Parameter] public Guid Id { get; set; } = Guid.Empty;

    private IDisposable? _navigationHandlerDispose;
    private bool forceExit;

    protected override async Task OnInitializedAsync()
    {
        _navigationHandlerDispose =  this.NavManager.RegisterLocationChangingHandler(OnNavigationRequested);
        await this.EditService.GetForecastAsync(this.Id);
    }

    private async Task Save()
        => await EditService.UpdateForecastAsync();

    private ValueTask OnNavigationRequested(LocationChangingContext context)
    {
        var prevent = this.EditService.EditStateContext.IsDirty & !forceExit;

        if (prevent)
            context.PreventNavigation();

        return ValueTask.CompletedTask;
    }

    private void Exit()
        => this.NavManager.NavigateTo("/");

    private void ForceExit()
    {
        this.forceExit = true;
        this.NavManager.NavigateTo("/");
    }

    public void Dispose()
        =>  _navigationHandlerDispose?.Dispose();
}
